<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="GoodsMapper">
	
	<!--  제품 등록 -->
	<insert id="productRegister1" parameterType="GoodsVO">
		INSERT INTO goods ( g_id, g_name, g_content, m_id, c_id,  g_img1, g_rimg1, g_img2, g_rimg2 , g_img3, g_rimg3, g_img4, g_rimg4 ) 
		VALUES(#{g_id}, #{g_name}, #{g_content}, #{m_id}, #{ c_id}, #{g_img1}, #{g_rimg1}, #{g_img2}, #{g_rimg2}, #{g_img3}, #{ g_rimg3}, #{g_img4}, #{ g_rimg4})
	</insert>


	<!-- 제품 목록 띄우기 -->
	<select id="getGoodsList" resultType="GoodsVO">
		SELECT  *  FROM GOODS G
		INNER JOIN CATEGORY C ON C.C_ID = G.C_ID
	</select>
	
	<!-- 제품 상세 보기 -->
	<select id="getGoodsById" parameterType="GoodsVO" resultType="GoodsVO">
		SELECT * FROM goods
		WHERE g_id = #{g_id}
	</select>
	
	<!-- ============================ -->
	<!-- user 페이지에서 제품 상세 페이지 보기 -->
	<select id="getProductDetail" parameterType="String" resultType="GoodsVO">
		SELECT * FROM goods
		WHERE g_id = #{g_id}
	</select>
	
	<!-- price 정보(최소가격) 갖고오기 -->
	<select id="getProductPrice" parameterType="String" resultType="PriceVO">
		SELECT p.* 
		FROM price p
		JOIN (
		    SELECT p_rent, MIN(p_price) AS min_price
		    FROM price
		    WHERE g_id = #{g_id}
		    GROUP BY p_rent
		) min_prices
		ON p.p_rent = min_prices.p_rent AND p.p_price = min_prices.min_price
		WHERE p.g_id = #{g_id}
	</select>
	
	<!-- 최저 렌탈 정보 갖고오기 -->
	<select id="getMinPrice" parameterType="String" resultType="PriceVO">
		SELECT * FROM price
		WHERE g_id = #{g_id} AND p_price = (
		    SELECT MIN(p_price)
		    FROM price
		    WHERE g_id = #{g_id}
		)
	</select>
	
	

	<!-- 리뷰 등록 -->
	<update id="saveUserReview" parameterType="UserReviewVO">
		UPDATE REVIEW SET
		R_POINT = #{r_point}, R_CONTENT= #{r_content}, R_REGDATE = now()
		WHERE
		R_ID = #{r_id}
	</update>

<!-- #############
		#     가격 관련 매퍼     #
		############ -->

	<!-- 가격 목록 띄우기 -->
	<select id="getPriceList" resultType="PriceVO">
		<![CDATA[
		SELECT  *  FROM PRICE P
		INNER JOIN GOODS G
		ON P.G_ID = G.G_ID
		WHERE id = #{id};
		]]>
	</select>
	
	<!-- 가격 상세 보기 -->
	<select id="getPriceById" parameterType="PriceVO" resultType="PriceVO">
		SELECT * FROM price
		WHERE p_id = #{p_id}
	</select>
	
	<!-- 가격 등록 -->
	<insert id="insertPrice" parameterType="PriceVO">
		INSERT INTO price ( p_id, s_name, p_rent, p_price, p_card,  p_gift, p_text, g_id, id ) 
		VALUES(#{p_id}, #{s_name}, #{p_rent}, #{p_price}, #{ p_card}, #{p_gift}, #{p_text}, #{g_id}, #{id} )
	</insert>
	
	<!-- 가격 수정 -->
	<update id="updatePrice" parameterType="PriceVO">
		UPDATE price SET
		p_price = #{p_price}, p_card = #{ p_card}, p_gift = #{p_gift}, p_text = #{p_text}
		WHERE
		P_ID = #{p_id}
	</update>
	
	<!-- 가격 삭제 -->
	<delete id="deletePrice" parameterType="PriceVO">
		DELETE FROM price
		WHERE p_id = #{p_id}
	</delete>

<!-- #############
		#     카드 관련 매퍼     #
		############ -->

	<!--  카드 등록 -->
	<insert id="insertCard" parameterType="CardVO">
		INSERT INTO card ( c_img1, c_rimg1, id ) 
		VALUES( #{c_img1}, #{c_rimg1}, #{id} )
	</insert>
	
	<!-- 카드 목록 띄우기 -->
	<select id="getCardList" resultType="CardVO">
		<![CDATA[
		SELECT  *  FROM CARD
		WHERE id = #{id}
		ORDER BY c_num ASC;
		]]>
	</select>
	
	<!-- 카드 상세 보기 -->
	<select id="getCardById" parameterType="CardVO" resultType="CardVO">
		SELECT * FROM card
		WHERE c_num = #{c_num}
	</select>
	
	<!-- 카드 수정 -->
	<update id="updateCard" parameterType="CardVO">
		UPDATE card
		SET
	        <if test="c_img1 != null">
	            c_img1 = #{c_img1}
	            , c_rimg1 = #{c_rimg1}
	        </if>
		WHERE
		c_num = #{c_num}
	</update>
	
	<!-- 카드 삭제 -->
	<delete id="deleteCard" parameterType="CardVO">
		DELETE FROM card
		WHERE c_num = #{c_num}
	</delete>
	

	<!-- 제품 수정 -->
	<update id="updateGoods" parameterType="GoodsVO">
	    UPDATE goods SET
	    g_name = #{g_name},
	    g_content = #{g_content},
	    m_id = #{m_id},
	    c_id = #{c_id}
	    
	        <if test="g_img1 != null">
	            , g_img1 = #{g_img1}
	            , g_rimg1 = #{g_rimg1}
	        </if>
   			<if test="g_img2 != null">
	            , g_img2 = #{g_img2}
	            , g_rimg2 = #{g_rimg2}
	        </if>
	           <if test="g_rimg3 != null">
	            , g_img3 = #{g_img3}
	            , g_rimg3 = #{g_rimg3}
	        </if>       
	    
	        <if test="g_img4 != null">
	            , g_img4 = #{g_img4}
	            , g_rimg4 = #{g_rimg4}
	        </if>
	    
	    WHERE g_id = #{g_id}
	</update>
	
	<!-- 제품 삭제 -->
	<delete id="deleteGoods" parameterType="GoodsVO">
		DELETE FROM goods
		WHERE g_id = #{g_id}
	</delete>

<!--  제품상세검색 -->
<select id="getCategoryGoodsList" parameterType="HashMap" resultType="GoodsVO">
    SELECT GOODS.*, CATEGORY.C_NAME, MAKER.M_NAME 
    FROM GOODS
    INNER JOIN CATEGORY ON GOODS.C_ID = CATEGORY.C_ID 
    INNER JOIN MAKER ON GOODS.M_ID = MAKER.M_ID 
    <where>
        <if test="c_name != null and !c_name.isEmpty()">
            AND CATEGORY.C_NAME = #{c_name}
        </if>
        <if test="selectedBrands != null and !selectedBrands.isEmpty()">
            AND MAKER.M_NAME IN
            <foreach collection="selectedBrands" item="brand" open="(" separator="," close=")">
                #{brand}
            </foreach>
        </if>
<!-- 여기에 if 가격 -->
    </where>
</select>





<!-- 	<select id="getCategoryGoodsList" parameterType="String" resultType="GoodsVO">
        SELECT GOODS.*,CATEGORY.C_NAME,MAKER.M_NAME 
	    FROM GOODS
	    INNER JOIN CATEGORY
	    ON GOODS.C_ID = CATEGORY.C_ID 
	    INNER JOIN MAKER
	    ON GOODS.M_ID = MAKER.M_ID 
	    
        WHERE CATEGORY.C_NAME = #{c_name}
    </select>
 -->

</mapper>