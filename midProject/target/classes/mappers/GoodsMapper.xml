<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="GoodsMapper">

	<!-- 제품 등록 -->
	<insert id="productRegister1" parameterType="GoodsVO">
		INSERT INTO goods (
		g_id, g_name, g_content, m_id, c_id, g_img1, g_rimg1, g_img2, g_rimg2
		, g_img3, g_rimg3, g_img4, g_rimg4 )
		VALUES(#{g_id}, #{g_name},
		#{g_content}, #{m_id}, #{ c_id}, #{g_img1}, #{g_rimg1},
		#{g_img2},
		#{g_rimg2}, #{g_img3}, #{ g_rimg3}, #{g_img4}, #{ g_rimg4})
	</insert>


	<!-- 제품 목록 띄우기 -->
	<select id="getGoodsList" resultType="GoodsVO">
		SELECT *
		FROM GOODS G
		INNER JOIN CATEGORY C
		ON C.C_ID = G.C_ID
	</select>
	
	<!-- 최저 렌탈 정보 갖고오기(전체리스트) -->
	<select id="getMinPriceList" parameterType="GoodsVO" resultType="PriceVO">
		SELECT G.*, C.*, P.*
		FROM GOODS G
		INNER JOIN CATEGORY C ON C.C_ID = G.C_ID
		LEFT JOIN price P ON G.g_id = P.g_id
		WHERE P.p_price = (
		    SELECT MIN(p_price)
		    FROM price
		    WHERE g_id = G.g_id
		)
		ORDER BY G.g_id;
	</select>
	

	<!-- 제품 상세 보기 -->
	<select id="getGoodsById" parameterType="GoodsVO"
		resultType="GoodsVO">
		SELECT * FROM goods
		WHERE g_id = #{g_id}
	</select>
	
	<!-- =========== 렌탈정보-하림 ========== -->
	<select id="getRentalInfo" parameterType="PriceVO" resultType="PriceVO">
    SELECT p.p_id, p.s_name, p.p_rent, p.p_price, p.p_card, p.g_id, g.g_rimg1
    FROM price p
    JOIN goods g ON p.g_id = g.g_id
    WHERE p.g_id = #{g_id} AND p.p_rent = #{p_rent} AND p.s_name = #{s_name}
	</select>
	
	<!-- ============================ -->
	<!-- 이 제품의 공급사들 출력  -->
	<select id="getSupplierInfo" parameterType="String" resultType="PriceVO">
		SELECT DISTINCT s_name
		FROM price
		WHERE g_id = #{g_id}
	</select>
	
	
	<!-- user 페이지에서 제품 상세 페이지 보기 -->
	<select id="getProductDetail" parameterType="String" resultType="GoodsVO">
		SELECT * FROM goods
		WHERE g_id = #{g_id}
	</select>
	
	<!-- price 정보(최소가격) 갖고오기 -->
	<select id="getProductPrice" parameterType="String" resultType="PriceVO">
		SELECT p.* 
		FROM price p
		JOIN (
		    SELECT p_rent, MIN(p_price) AS min_price
		    FROM price
		    WHERE g_id = #{g_id}
		    GROUP BY p_rent
		) min_prices
		ON p.p_rent = min_prices.p_rent AND p.p_price = min_prices.min_price
		WHERE p.g_id = #{g_id}
	</select>
	
	<!-- 최저 렌탈 정보 갖고오기 -->
	<select id="getMinPrice" parameterType="String" resultType="PriceVO">
		SELECT * FROM price
		WHERE g_id = #{g_id} AND p_price = (
		    SELECT MIN(p_price)
		    FROM price
		    WHERE g_id = #{g_id}
		)
	</select>
	
	<!-- 개월 수에 따른 공급사의 가격 정보 가져오기 (최저가부터!! 수정완)-->
	<select id="getPriceInfo" parameterType="hashmap" resultType="PriceVO">
		SELECT * FROM price
    	WHERE g_id = #{g_id} AND p_rent = #{selectedMonths}
    	ORDER BY p_price
	</select>

<!-- #############
		#     가격 관련 매퍼     #
		############ -->

	<!-- 가격 목록 띄우기 -->
	<select id="getPriceList" resultType="PriceVO">
		<![CDATA[
		SELECT  *  FROM PRICE P
		INNER JOIN GOODS G
		ON P.G_ID = G.G_ID
		WHERE id = #{id};
		]]>
	</select>
	
	<!-- 가격 상세 보기 -->
	<select id="getPriceById" parameterType="PriceVO" resultType="PriceVO">
		SELECT * FROM price
		WHERE p_id = #{p_id}
	</select>
	
	<!-- 가격 등록 -->
	<insert id="insertPrice" parameterType="PriceVO">
		INSERT INTO price ( p_id,
		s_name, p_rent, p_price, p_card, p_gift, p_text, g_id, id )
		VALUES(#{p_id}, #{s_name}, #{p_rent}, #{p_price}, #{ p_card},
		#{p_gift}, #{p_text}, #{g_id}, #{id} )
	</insert>
	
	<!-- 가격 수정 -->
	<update id="updatePrice" parameterType="PriceVO">
		UPDATE price SET
		p_price = #{p_price}, p_card = #{ p_card}, p_gift = #{p_gift}, p_text = #{p_text}
		WHERE
		P_ID = #{p_id}
	</update>

	<!-- 가격 삭제 -->
	<delete id="deletePrice" parameterType="PriceVO">
		DELETE FROM price
		WHERE p_id = #{p_id}
	</delete>

<!-- #############
		#     카드 관련 매퍼     #
		############ -->

	<!--  카드 등록 -->
	<insert id="insertCard" parameterType="CardVO">
		INSERT INTO card ( c_img1, c_rimg1, id ) 
		VALUES( #{c_img1}, #{c_rimg1}, #{id} )
	</insert>
	
	<!-- 카드 목록 띄우기 -->
	<select id="getCardList" resultType="CardVO">
		<![CDATA[
		SELECT  *  FROM CARD
		WHERE id = #{id}
		ORDER BY c_num ASC;
		]]>
	</select>
	
	<!-- 카드 상세 보기 -->
	<select id="getCardById" parameterType="CardVO" resultType="CardVO">
		SELECT * FROM card
		WHERE c_num = #{c_num}
	</select>
	
	<!-- 카드 수정 -->
	<update id="updateCard" parameterType="CardVO">
		UPDATE card
		SET
	        <if test="c_img1 != null">
	            c_img1 = #{c_img1}
	            , c_rimg1 = #{c_rimg1}
	        </if>
		WHERE
		c_num = #{c_num}
	</update>
	
	<!-- 카드 삭제 -->
	<delete id="deleteCard" parameterType="CardVO">
		DELETE FROM card
		WHERE c_num = #{c_num}
	</delete>
	

	<!-- 제품 수정 -->
	<update id="updateGoods" parameterType="GoodsVO">
		UPDATE goods SET
		g_name = #{g_name},
		g_content = #{g_content},
		m_id =
		#{m_id},
		c_id = #{c_id}

		<if test="g_img1 != null">
			, g_img1 = #{g_img1}
			, g_rimg1 = #{g_rimg1}
		</if>
		<if test="g_img2 != null">
			, g_img2 = #{g_img2}
			, g_rimg2 = #{g_rimg2}
		</if>
		<if test="g_rimg3 != null">
			, g_img3 = #{g_img3}
			, g_rimg3 = #{g_rimg3}
		</if>

		<if test="g_img4 != null">
			, g_img4 = #{g_img4}
			, g_rimg4 = #{g_rimg4}
		</if>

		WHERE g_id = #{g_id}
	</update>

	<!-- 제품 삭제 -->
	<delete id="deleteGoods" parameterType="GoodsVO">
		DELETE FROM goods
		WHERE
		g_id = #{g_id}
	</delete>

	<!-- 제품상세검색 -->
	<select id="getCategoryGoodsList" parameterType="HashMap"
		resultType="GoodsVO">
		SELECT GOODS.*, CATEGORY.C_NAME, MAKER.M_NAME
		FROM GOODS
		INNER JOIN CATEGORY ON GOODS.C_ID = CATEGORY.C_ID
		INNER JOIN
		MAKER ON GOODS.M_ID = MAKER.M_ID
		<where>
			<if test="c_name != null and !c_name.isEmpty()">
				AND CATEGORY.C_NAME = #{c_name}
			</if>
			<if test="selectedBrands != null and !selectedBrands.isEmpty()">
				AND MAKER.M_NAME IN
				<foreach collection="selectedBrands" item="brand" open="("
					separator="," close=")">
					#{brand}
				</foreach>
			</if>
			<!-- <if test="minPrice != null and maxPrice != null"> AND PRICE.P_PRICE 
				BETWEEN #{minPrice} AND #{maxPrice} </if> -->
		</where>
	</select>

	<!-- 제품 검색 Header -->
<select id="getSearchGoodsList" parameterType="hashmap" resultType="GoodsVO">
    SELECT DISTINCT G.*, 
    CASE 
        WHEN P.P_PRICE IS NOT NULL THEN
            (SELECT MIN(P2.P_PRICE) FROM PRICE P2 WHERE P2.G_ID = G.G_ID)
        ELSE NULL
    END AS MIN_PRICE, 
    CASE 
        WHEN P.P_PRICE IS NOT NULL THEN
            (SELECT S_NAME FROM PRICE P2 WHERE P2.G_ID = G.G_ID AND P2.P_PRICE = (SELECT MIN(P3.P_PRICE) FROM PRICE P3 WHERE P3.G_ID = G.G_ID))
        ELSE NULL
    END AS S_NAME,
    M.M_NAME
    FROM GOODS G
    LEFT JOIN PRICE P ON G.G_ID = P.G_ID
    LEFT JOIN MAKER M ON G.M_ID = M.M_ID
    LEFT JOIN CATEGORY C ON G.C_ID = C.C_ID
    WHERE 
    <choose>
        <when test="searchCondition == 'total'">
            C_NAME LIKE '%${searchKeyword}%'
            OR G_NAME LIKE '%${searchKeyword}%'
            OR M_NAME LIKE '%${searchKeyword}%' 
            OR S_NAME LIKE '%${searchKeyword}%'
        </when>
        <otherwise>
            1 = 1 <!-- 항상 true이므로 모든 조건이 적용됩니다. -->
        </otherwise>
    </choose>
</select>

</mapper>